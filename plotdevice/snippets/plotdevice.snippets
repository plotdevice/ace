### general purpose

snippet {
	{"${1:k}":${2:v}, kw$3}
snippet kw
	"${1:k}":${2:v}, kw$3
snippet dict
	dict(${1:k}=${2:v}, dkw$3)
snippet dkw
	${1:k}=${2:v}, dkw$3
snippet t
	True
snippet f
	False
snippet lorem
	"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
snippet draw
	def draw(state):
	    print FRAME$1
snippet setup
	def setup(state):
	    $1
snippet stop
	def stop(state):
	    $1
snippet anim
	speed(${1:30})$2
	def setup(state):
		pass
	def draw(state):
		print FRAME
	def stop(state):
		pass


### Some handy abbreviations borrowed from python.snippets

snippet imp
	import ${1:module}
snippet xi
	${1:library} = ximport("$1")
snippet from
	from ${1:package} import ${2:module}
snippet wh
	while ${1:condition}:
	    $2
snippet with
	with ${1:expr} as ${2:var}:
	    $3
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
	    """${3:docstring for $1}"""
	    def __init__(self, ${4:arg}):
	        ${5:super($1, self).__init__()}
	        $6
# New Function
snippet def
	def ${1:fname}($2):
	    $3
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
	    $3
# Ifs
snippet if
	if ${1:condition}:
		$2
snippet el
	else:
		$1
snippet ei
	elif ${1:condition}:
		$2
# For
snippet for
	for ${1:item} in ${2:items}:
		$3
snippet try
	try:
		${1:# TODO: write code...}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}





### signatures for the plotdevice api

snippet align
	align(${1:LEFT/RIGHT/CENTER/JUSTIFY})
snippet arrow
	arrow(${1:x}, ${2:y}${3:, width=${4:100}, type=${5:NORMAL/FORTYFIVE}, draw=${6:True}})
snippet autoclosepath
	autoclosepath(${1:close=${2:True}})
snippet autotext
	autotext(${1:sourceFile})
snippet background
	background()
snippet beginclip
	beginclip(${1:path})
snippet beginpath
	beginpath(${1:${2:x}, ${3:y}})
snippet bezier
	bezier(${1:${2:x}, ${3:y}}, close=${4:True}, draw=${5:True})
snippet capstyle
	capstyle(${1:style=${2:BUTT/ROUND/SQUARE}})
snippet choice
	choice(${1:seq})
snippet clip
	clip()
snippet closepath
	closepath()
snippet color
	color("${1:black}")
snippet colormode
	colormode(${1:mode=${2:RGB/HSB/CMYK}, range=${3:None}})
snippet colorrange
	colorrange(${1:maxval})
snippet curveto
	curveto(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x}, ${6:y})
snippet drawpath
	drawpath(${1:path})
snippet ellipse
	ellipse(${1:x}, ${2:y}, ${3:width}, ${4:height}${5:, draw=${6:True}})
snippet endclip
	endclip()
snippet endpath
	endpath(${1:draw=${2:True}})
snippet export
	export("${1:${2:document}.${3:mov}}"${4:, loop=${5:None}, fps=${6:None}, bitrate=${7:1.0}})
snippet files
	files("${1:${2:*}.${3:json}}")
snippet fill
	fill(${1:"#${2:000}"})
snippet findpath
	findpath(${1:points}${2:, curvature=${3:1.0}})
snippet findvar
	findvar(${1:name})
snippet font
	font("${1:HelveticaNeue-Medium}", ${2:12}})
snippet fonts
	fonts(${1:like="${2:akzidenz}", western=${3:True}})
snippet fontsize
	fontsize(${1:12})
snippet grid
	grid(${1:cols}, ${2:rows}${3:, colSize=${4:1}, rowSize=${5:1}, shuffled=${6:False}})
snippet image
	image("${1:image.png}", ${2:x}, ${3:y}${4:, width=${5:None}, height=${6:None}, alpha=${7:1.0}, data=${8:None}, draw=${9:True}})
snippet imagesize
	imagesize("${1:image.png}"${2:, data=${3:None}})
snippet joinstyle
	joinstyle(${1:MITER/ROUND/BEVEL})
snippet line
	line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}${5:, draw=${6:True}})
snippet lineheight
	lineheight(${1:None})
snippet lineto
	lineto(${1:x}, ${2:y})
snippet moveto
	moveto(${1:x}, ${2:y})
snippet nofill
	nofill()
snippet nostroke
	nostroke()
snippet outputmode
	outputmode(${1:RGB/HSB/CMYK})
snippet oval
	oval(${1:x}, ${2:y}, ${3:width}, ${4:height}${5:, draw=${6:True}})
snippet pop
	pop()
snippet push
	push()
snippet random
	random(${1:v1=${2:None}, v2=${3:None}})
snippet rect
	rect(${1:x}, ${2:y}, ${3:width}, ${4:height}${5:, roundness=${6:0.0}, draw=${7:True}})
snippet reset
	reset()
snippet rotate
	rotate(${1:degrees})
snippet save
	canvas.save("${1:${2:doc}.${3:pdf}}")
snippet canvas.save
	canvas.save("${1:${2:doc}.${3:pdf}}")
snippet scale
	scale(${1:x=${2:1}, y=${3:None}})
snippet size
	size(${1:width}, ${2:height})
snippet skew
	skew(${1:x=${2:0}, y=${3:0}})
snippet speed
	speed(${1:fps})
snippet star
	star(${1:startx}, ${2:starty}${3:, points=${4:20}, outer=${5:100}, inner=${6:50}, draw=${7:True}})
snippet stroke
	stroke()
snippet strokewidth
	strokewidth(${1:None})
snippet text
	text("${1:txt}", ${2:x}, ${3:y}${4:, width=${5:None}, height=${6:None}, outline=${7:False}, draw=${8:True}})
snippet textheight
	textheight("${1:txt}"${2:, width=${3:None}})
snippet textmetrics
	textmetrics("${1:txt}"${2:, width=${3:None}, height=${4:None}})
snippet textpath
	textpath("${1:txt}", ${2:x}, ${3:y}${4:, width=${5:None}, height=${6:None}})
snippet textwidth
	textwidth("${1:txt}"${2:, width=${3:None}})
snippet transform
	transform()
snippet transform()
	with transform(${1:${2:CENTER/CORNER, }${3:...}}):
		$4
snippet translate
	translate(x=${1:0}, y=${2:0})
snippet var
	var(${1:name}, type=${2:NUMBER/TEXT/BOOLEAN/BUTTON}${3:, default=${4:None}, min=${5:0}, max=${6:100}, value=${7:None}})
snippet ximport
	${1:libName} = ximport("$1")
